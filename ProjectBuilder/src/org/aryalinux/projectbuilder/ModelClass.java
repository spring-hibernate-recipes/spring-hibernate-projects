package org.aryalinux.projectbuilder;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class ModelClass {
	private String name;
	private List<Property> properties;
	private Map<String, String> references;
	private Map<String, String> aggregates;
	private List<String> packages;

	public ModelClass() {
		packages = new ArrayList<>();
	}

	public List<String> getPackages() {
		return packages;
	}

	public void setPackages(List<String> packages) {
		this.packages = packages;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Property> getProperties() {
		return properties;
	}

	public void setProperties(List<Property> properties) {
		this.properties = properties;
	}

	public Map<String, String> getReferences() {
		return references;
	}

	public void setReferences(Map<String, String> references) {
		this.references = references;
	}

	public Map<String, String> getAggregates() {
		return aggregates;
	}

	public void setAggregates(Map<String, String> aggregates) {
		this.aggregates = aggregates;
	}

	public void readFromConsole() {
		System.out.println("Please enter name of the model class");
		try {
			BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
			String line = bufferedReader.readLine();
			setName(line);
			setProperties(new ArrayList<>());
			while (true) {
				System.out.println("Add Property? (y/n)");
				line = bufferedReader.readLine();
				if (line.equalsIgnoreCase("y")) {
					Property property = new Property();
					property.readFromConsole();
					getProperties().add(property);
				} else {
					break;
				}
			}
			while (true) {
				System.out.println("Add a reference? (y/n)");
				line = bufferedReader.readLine();
				if (line.equalsIgnoreCase("y")) {
					setReferences(new LinkedHashMap<>());
					System.out.println("Enter the class whose reference you want to add");
					String className = bufferedReader.readLine();
					System.out.println("Enter the name of this property");
					String propertyName = bufferedReader.readLine();
					references.put(propertyName, className);
				} else {
					break;
				}
			}
			while (true) {
				System.out.println("Add an aggregate? (y/n)");
				line = bufferedReader.readLine();
				if (line.equalsIgnoreCase("y")) {
					setAggregates(new LinkedHashMap<>());
					System.out.println("Enter the class whose aggregate you want to add");
					String className = bufferedReader.readLine();
					System.out.println("Enter the name of this property");
					String propertyName = bufferedReader.readLine();
					aggregates.put(propertyName, className);
				} else {
					break;
				}
			}
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("@Entity\n");
		packages.add("javax.persistence.Entity");
		builder.append("public class " + name + "{\n");
		for (Property property : properties) {
			if (property.isPrimaryKey()) {
				builder.append("\t@Id\n");
				packages.add("javax.persistence.Id");
				if (property.isAutogenerated()) {
					builder.append("\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n");
					packages.add("javax.persistence.GenerationType");
					packages.add("javax.persistence.GeneratedValue");
				}
			} else {
				builder.append("\t@Column\n");
				packages.add("javax.persistence.Column");
			}
			builder.append("\tprivate " + property.getJavaDataType() + " " + property.getName() + ";\n");

		}
		for (Entry<String, String> reference : references.entrySet()) {
			builder.append("\t@OneToOne\n");
			builder.append("\tprivate " + reference.getValue() + " " + reference.getKey() + ";\n");
			packages.add("javax.persistence.OneToOne");
		}
		for (Entry<String, String> aggregate : aggregates.entrySet()) {
			builder.append("\t@OneToMany\n");
			builder.append("\tprivate List<" + aggregate.getValue() + "> " + aggregate.getKey() + ";\n");
			packages.add("javax.persistence.OneToMany");
			packages.add("java.util.List");
		}
		for (Property property : properties) {
			String name = property.getName();
			builder.append("\tpublic void set" + Character.toUpperCase(name.charAt(0)) + name.substring(1) + "("
					+ property.getJavaDataType() + " " + name + ") {\n");
			builder.append("\t\tthis." + name + " = " + name + ";\n");
			builder.append("\t}\n");
			builder.append("\tpublic " + property.getJavaDataType() + " get" + Character.toUpperCase(name.charAt(0))
					+ name.substring(1) + "() {\n");
			builder.append("\t\treturn this." + name + ";\n");
			builder.append("\t}\n");
		}
		for (Entry<String, String> reference : references.entrySet()) {
			String name = reference.getKey();
			builder.append("\tpublic void set" + Character.toUpperCase(name.charAt(0)) + name.substring(1) + "("
					+ reference.getValue() + " " + name + ") {\n");
			builder.append("\t\tthis." + name + " = " + name + ";\n");
			builder.append("\t}\n");
			builder.append("\tpublic " + reference.getValue() + " get" + Character.toUpperCase(name.charAt(0))
					+ name.substring(1) + "() {\n");
			builder.append("\t\treturn this." + name + ";\n");
			builder.append("\t}\n");
		}
		for (Entry<String, String> aggregate : aggregates.entrySet()) {
			String name = aggregate.getKey();
			builder.append("\tpublic void set" + Character.toUpperCase(name.charAt(0)) + name.substring(1) + "("
					+ "List<" + aggregate.getValue() + "> " + name + ") {\n");
			builder.append("\t\tthis." + name + " = " + name + ";\n");
			builder.append("\t}\n");
			builder.append("\tpublic List<" + aggregate.getValue() + "> get" + Character.toUpperCase(name.charAt(0))
					+ name.substring(1) + "() {\n");
			builder.append("\t\treturn this." + name + ";\n");
			builder.append("\t}\n");
		}
		builder.append("}");
		StringBuilder packageBuilder = new StringBuilder();
		for (String str : packages) {
			packageBuilder.append("import " + str + ";\n");
		}
		return packageBuilder.toString() + "\n" + builder.toString();
	}
}
